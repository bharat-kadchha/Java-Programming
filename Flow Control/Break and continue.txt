
        Break
        =====

    -> We can use break at three places.
    1. Inside switch.
    2. Inside loops.
    3. Inside labeled block.

    1. Inside switch.

        -> we use break inside switch to prevent fall-through.

        switch(x){
            case 1:
                System.out.println(0);
            case 2:
                System.out.println(1);
                break;
            case 3:
                System.out.println(3);
                break;
        }

    2. Inside loop.

        -> we use break inside loop to break the execution of loop.

        for(int i = 0; i < 10; i++){
            if(i == 5){
                break;
            }
        }

    3. Inside labeled block.

        -> we can use inside labeled block to break block execution based on some condition.

        int i = 5;
        l1{
            System.out.println("Inside block");
            if(i == 5){
                break;
            }
            System.out.println("end of block");
        }


    -> If we try to use other then this three places we get compile time error:- break outside switch or loops.



        ** Continue **
        ==============

        -> we can use continue at one place only.

        1. Inside loops.

        -> we use continue inside loops to skip current iteration and go for the next.
        -> If we try to use continue outside loops then we will get compile time error.

        Example 1:- 

            for(int i = 0; i < 10; i++){
                if(i == 5)[
                    continue;
                ]
                System.out.println(i);
            }

        Example 2:- 

            for(int i = 0; i < 10; i++){
                if(i % 2 == 0){
                    continue;
                }
                System.out.println(i);
            }

            output:- 1
                     3
                     5
                     7
                     9



    ** Labeled break and Continue **
    ================================

    -> we can use labeled break and continue to break or continue a perticular loop in nested loops.

    l1: 
    for( ; ;){
        l2:
        for(; ; ){
            l3:
            for(; ; ){
                break l2;
                or
                continue l2;
            }
        }
    }

    
    ** do - while vs continue **
    ----------------------------

    

