
        ** switch **
        ============

        -> If several options are available then not recommended to use nested if else because it reduce readability.
        -> To handle this requriment we should go for switch.

    -> syntex:-
        
        switch(x){
            case 1:
                //Action 1
                break;
            case 2:
                //Action 2
                break;
            case 3:
                //Action 3
                break;
            .
            .
            .
            .
            case n:
                //Action n
                break;
            
            default :
                //default Action

        }


    Case 1:
 
        -> The parameter types for the switch statement are byte, short, char, int until 1.4 version.
        -> from 1.5 version corresponding wrapper class and enum are allowed.
        -> from 1.7 version onwards string type is allowed.

            1.4v                1.5                 1.7
            --------------------------------------------
            byte                Byte     
            short               Short    
            char                Character           String
            int                 Integer
                                enum              


    Case 2:
        
        -> { } braces are mendatory except switch every where { } are optional.
        -> Both case and default are optional that is an empty switch statement is valid java syntex.
        
        int x = 10;
        switch(x){

        }

    Case 3:

        -> Inside switch every statement should be under some case or default that is independent statement are not allowed inside switch other wise we will get compile time error.
        
        int x = 10;
        switch(x){
            System.out.println("Hello");
        }

        output:- case, default, or '}' expected


    Case 4:
        -> every case label should be compile time constant that is constant expression.
        -> if we declare y as final then we won't get compile time error.

        int x = 10;
        int y = 20;
        switch(x){
            case 10:
                System.out.println(10);
                break;
            case y:
                System.out.println(20);
                break;
        }

        output:- constant expression required

        int x = 10;
        final int y = 20;
        switch(x){
            case 10:
                System.out.println(10);
                break;
            case y:
                System.out.println(20);
                break;
        }

        output:- 10


        Case 5: 
            -> Both switch argument and case label can be expression but case should be constant expression.

            int x = 10;
            switch(x){
                    case 10:
                        System.out.println(10);
                        break;

                    case 10+20+30:
                        System.out.println(60);
                        break;
            }


        Case 6:
            -> every case label should be in the range of switch argument type otherwise we will get compile time error. 

            byte b = 10;                                    
            switch(b){                              //byte type             
                case 10:
                    System.out.println(10);
                    break;

                case 100:
                    System.out.println(100);
                    break;

                case 1000:
                    System.out.println(1000);
                    break;
            } 

            output:- compile time error possible lossy conversion from int to byte

            byte b = 10;                                    
            switch(b + 1){                      //int type                        
                case 11:
                    System.out.println(11);
                    break;

                case 100:
                    System.out.println(100);
                    break;

                case 1000:
                    System.out.println(1000);
                    break;
            } 

            output:- 11

        
        Case 7:
            -> dupliacte case label should not be allowed.

            int x = 10;                                    
            switch(x){                                             
                case 97:
                    System.out.println(97);
                    break;

                case 98:
                    System.out.println(98);
                    break;

                case 99:
                    System.out.println(99);
                    break;
                
                case 'a':
                    System.out.println('a');
                    break;
            } 

            output:- compile time error :- duplicate case label


        Fall-through inside switch
        --------------------------

        case 8:-
            -> With in the switch if any case is matched from that case onwards all statement will be executed until break or end of the switch this is called Fall-through inside switch.
            -> the mail advantage of fall-through is we can define common action for multiple statement.

            switch(x){
                    case 0:
                        System.out.println(0);

                    case 1:
                        System.out.println(1);
                        break;

                    case 2:
                        System.out.println(2);

                    default:
                        System.out.println("def");
            }

            output:- 
                x = 0
                 0
                 1

                x = 1
                 1

                x = 2
                 2
                 def

                x = 3
                 def

        case 9:
            -> with in the switch we can take default case at most once.
            -> default will be executed if and only if there is no case matched.
            -> we can write default anywhere but it is recommended to write as a last case.

            switch(x){
                default:
                    System.out.println("def");

                case 0:
                    System.out.println(0);
                    break;

                case 1:
                    System.out.println(1);
                

                case 2:
                    System.out.println(2);

            }

            output:- 
                x = 0
                 0

                x = 1
                 1
                 2

                x = 2
                 2
                 

                x = 3
                 def
                 0
        
