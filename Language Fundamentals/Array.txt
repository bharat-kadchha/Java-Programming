            Arrays

-> Arrays are fixed in length and store homoginous element only.

1. Single dimension Arrays

    -> Declaration of Arrays
    1. int[] a; //Can not provide size at declaration
    2. int a[];
    3. int []a;

    ->  Creation of Arrays
    1. int[] a = new int[4];  //size is mendetory
    -> max size of array is max value of integer.
    -> we can only able to provide int value at size.
    -> max is 2147483647.
    -> every array type has their corresponding class at language level. 


    -> Initialization of array element
    1. int[] a = new int[3];
    a[0] = 10;
    a[1] = 20;
    a[2] = 30;


2. Multidimension Arrays

-> Array of Arrays concept followed by sun people.
   https://www.google.com/url?sa=i&url=http%3A%2F%2Fmath.hws.edu%2Fjavanotes%2Fc7%2Fs5.html&psig=AOvVaw1tSNu-MzN9b8QQ-1nCOtq_&ust=1606373447634000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCIC0hMqNne0CFQAAAAAdAAAAABAD
    
    -> Declaration of Arrays          
        1. int[]  []d;
        2. int[] e[];
        3. int [][]f;
        4. int []g[];
        5. int[][] h;
        6. int i[][];


    -> Creation of array 
        -> int[][] a = new int[base_size][] // we need to provide base size.
        

    -> Initialization of element
        -> int[][] a = new int[3][2];
        -> a[0][0] = 1;

        OR

        int[][] a = new int[3][]; // 100% valid
        a[0] = new int[4];
        a[1] = new int[5];

        OR

        int[][] a = new int[3][]; // 100% valid
        a[0] = new int[4];
        a[0][0]  // 0
        a[1]     // null
        a[1][0]  // NullPointerException if we perform any operation on null value.

3. Single line declaration, Creation and Initialization.

    int[] array = new int[]{10,20,30}; //no need to specify size. otherwise compile tile error.
    int[] array = {10,20,30};


    -> Invalid Creation of array
    1. int[] a;
       a = {10,20,30};



4. Anonymous array.
    -> if we want array without name is called Anonymous array.
    -> The main purpose of anonymous array is just for instant use (just for one time usage).

    new int[]{10,20,30}; // not specify size.

    -> Anonymous array is passed as an argument of method
 

5. length variable and length() method

    1. length variable.

    int[] a = new int[10];
    sout(a.length) - > 10    // length is final variable.
    sout(a.length()) - > compile time error.(can not find symbol)
    -> All type of array have final variable called length. 

    2. length() method

    String s = new String("Yogesh");
    sout(s.length()); -> 6 // length method is final method by default.
    sout(s.length); -> compile time error.
    -> String class is final so all the methods inside it is bydefault final.

6. Array element Assignment

    byte -> short -> int -> long -> float -> double
    char -> int

    int[] a = new int[3];
    a[0] = 'a';  //100% valid 
    a[1] = 10.20; // Compile time error posible loss of pricision.

    we an not assign short to char or vice versa. because short is signed data type.

7. Array variable Assignment 

    case 1.
    int[] a = new int[]{10,20,30,40};
    int[] b = new int[]{10,20};

    a = b; OR b = a;  //100% valid because it does not swap element but only references.

    case 2.
    int[] a = new int[]{10,20,30,40};
    char[] c = new char[]{'a','b','c'};

    a = c; // Invalid assignment we get compile time error.
    
    case 3.
    String[] s = new String["a","aa","aaa"];
    Object[] o = s; // 100% valid
    // In object type array, we can assign chid array to parent variable.

    int -> float        //valid
    int[] -> float[]    //Invalid
    char -> int         //valid
    float -> int        //Invalid
    char[] -> int[]         //Invalid
    String -> object        //valid
    String[] -> object[]    //valid
 
    int[][] a = new int[3][];
    a[0] = new int[4][3]; // compile time error incompatable type  because in place of one dimension we are providing two dimension.
    a[0] = 10; // compile time error incompatable type  

    a[0] = new int[2]; //valid


    // below are valid code
    int[][] z = new int[4][5];
    z[0] = new int[3];
    z[1] = new int[4];
    z = new int[1][2];
    
    Note:- when we assigning one array to another array then dimension and type must be matched.
    