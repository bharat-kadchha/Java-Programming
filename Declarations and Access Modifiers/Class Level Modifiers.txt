
    class Level Modifiers
    =====================

    -> Whenever we are writing our own classes we have to provide some information about our class to the JVM.
    -> Whether this class is accessable from anywhere or not.
    -> Whether child class creation is allowed or not.
    -> Whether we can create object or not.
    -> Such information we will provide using access modifier.

    The Only applicable Modifiers for TOP LEVEL classes are.
    --------------------------------------------------------
    1. public
    2. default
    3. final
    4. abstract
    5. strictfp

    For inner classes applicable Modifiers are.
    -------------------------------------------
    1. public
    2. private
    3. default
    4. final
    5. abstract
    6. static
    7. strictfp
    8. protected

    Case 1:-

        private class ClassLevelModifier {
            public static void main(String[] args) {
                System.out.println("Hello!!");
            }
        }

        output:- modifier private not allowed here



        Modifier public
        ===============

        -> we class declared as a public then we can access that class form anywhere.


        Modifier default
        ================

        -> If a class is declared as default then we can access that class only with in the current package that is from outside package we can't access.
        -> default access is also known as package level access.


        Modifier final
        ==============

        -> final is the modifier applicable for classes, methods and variables.

            final methods
            -------------
            
            -> whatever methods parents has bydefault available to the child through inheritance.
            -> If the child not satisfied with parent method implimentation then child is allowed to redefine that method based on his requriment this process is called overriding.
            -> If the parent class method declared as a final then we can't override that in child class because it's implimentation is final.

            class p {
                public void property(){
                    System.out.println("Gold");
                }
                public final void marrie(){
                    System.out.println("sanju");
                }
            }
            class c extends p {
                public void marrie(){
                    System.out.println("xyz");
                }
            }

            compile time error:- marrie() in c cannot override marrie() in p overridden method is final.


            final class
            -----------

                final class p {

                } 
                class c extends p{

                }

                compile time error:- cannot inherit from final p.

            -> Every method present in final class are bydefault final.
            -> Every variables present in final class need not be final.

        -> The main advantage of final keyword is we can achieve security and provide unique implimentation.
        -> Main disadvange of final keyword is we are missing key benefits of oops : Inheritance(because of final classes) and polymorphism (because of final methods).
        -> If there is no specific requriment then it is not recommended to use final keyword.  



        abstract modifier
        ================

            -> abstract is a modifier applicable for classes and methods but not for variables.


            abstract method
            ---------------

                -> Even though we don't about implimentation still we can declare a method with abstract modifier that is for abstract methods only declaration is available but not implimentation.

                -> abstract declaration should ends with ;.

                    public abstract void m1(); //valid 

                    public abstract void m1(){} //compile time error

                -> child class is responsible to provide implimentation for parent abstract method.

                -> By declaring abstract method in the parent class we can provide guidelines to the child classes such that which method child has to implement.

                -> The following are various illegal combination of modifiers for method with respect to abstract.

                    1. abstract final
                    2. abstract native
                    3. abstract synchronised
                    4. abstract static
                    5. abstract private
                    6. abstract strictfp


            abstract class
            --------------

                -> for any java class if we are allowed to create an object(because of partial implimentation) such type of class we have to declare with abstract modifier.

                -> for abstract classes instantiation is not possible.

                    abstract class Test {
                        public static void main(String[] args){
                            Test t = new Test();
                        }
                    }

                    compile time error:- Test is abstract can not be insantiated.

                
            abstract class vs abstract method
            ---------------------------------

                -> if a class contain atleast one abstract method then compulsory we should declare class as abstract otherwise we will get compile time error.

                -> if a class contain atleast one abstract method then implimentation is not complete and hence it is not recommended to create object to restrict object instantiation compulsory we should class as abstract.

                -> abstract class can contain zero number of abstract method also.
                    1. HttpServlet class is abstract but it does not contain any abstract method.
                    2. Every adapter is recommended to declare abstract but it does not contain any abstract method.

                
            
            Examples:- 

                1. 
                    class Test{
                        public void m1();
                    }

                    compile time error:- missing method body, or declare abstract

                2. 
                    

