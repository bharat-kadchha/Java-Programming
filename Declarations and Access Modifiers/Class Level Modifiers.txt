
    class Level Modifiers
    =====================

    -> Whenever we are writing our own classes we have to provide some information about our class to the JVM.
    -> Whether this class is accessable from anywhere or not.
    -> Whether child class creation is allowed or not.
    -> Whether we can create object or not.
    -> Such information we will provide using access modifier.

    The Only applicable Modifiers for TOP LEVEL classes are.
    --------------------------------------------------------
    1. public
    2. default
    3. final
    4. abstract
    5. strictfp

    For inner classes applicable Modifiers are.
    -------------------------------------------
    1. public
    2. private
    3. default
    4. final
    5. abstract
    6. static
    7. strictfp
    8. protected

    Case 1:-

        private class ClassLevelModifier {
            public static void main(String[] args) {
                System.out.println("Hello!!");
            }
        }

        output:- modifier private not allowed here



        Modifier public
        ===============

        -> we class declared as a public then we can access that class form anywhere.


        Modifier default
        ================

        -> If a class is declared as default then we can access that class only with in the current package that is from outside package we can't access.
        -> default access is also known as package level access.


        Modifier final
        ==============

        -> final is the modifier applicable for classes, methods and variables.

            final methods
            -------------
            
            -> whatever methods parents has bydefault available to the child through inheritance.
            -> If the child not satisfied with parent method implimentation then child is allowed to redefine that method based on his requriment this process is called overriding.
            -> If the parent class method declared as a final then we can't override that in child class because it's implimentation is final.

            class p {
                public void property(){
                    System.out.println("Gold");
                }
                public final void marrie(){
                    System.out.println("sanju");
                }
            }
            class c extends p {
                public void marrie(){
                    System.out.println("xyz");
                }
            }

            compile time error:- marrie() in c cannot override marrie() in p overridden method is final.


            final class
            -----------

                final class p {

                } 
                class c extends p{

                }

                compile time error:- cannot inherit from final p.

            -> Every method present in final class are bydefault final.
            -> Every variables present in final class need not be final.

            





