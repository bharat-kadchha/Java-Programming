
    Member level modifiers
    ======================

    -> Recommended modifier for data member(variable) is private.
    -> Recommended modifier for methods is public.
    
        Public Members
        --------------

            -> If a member declared as public then we can access that member form any where but corrosponding class should be visible.
            -> before checking member visibility we have to check class visibility.
            -> If a class and method both public then only we can access that form outside package.


        default Members
        ---------------

            -> If a member declared as default then we can access that member only with in the current package that is form out side of package we can't access.
            -> default access is known as package level access.


        private Members
        ---------------

            -> If a member is private then we can access that member only with in the class that is form outside of the class we can't access.
            -> abstract method should be availabel to the child classes to provide implemetation where as private methods are availabel to the child classes hence private abstract combination is illegal for methods.


        Protected Members [The most missunderstood modifier in java]
        -----------------

            -> If a member declared as Protected then we can access that member anywhere with in the current package but only in child classes of outside package.
                
                Protected = default + kids.

            -> we can access Protected member with in the current package any where either by using parent reference or by using child reference but we can access protected member in outside package only in child classes and we should use child reference only that is parent reference can not be used to access protected member form outside package.

            -> we can access protected member form outside only in child classes and we should use that child class reference only.

                Example:- 
                ---------   
                    package pak1;
                    public class A{
                        protected void m1(){
                            System.out.println("A");
                        }
                    }

                    package pak2
                    public class B extends A{

                    }
                    public class C extends B{
                        A a = new A();
                        a.m1();        //Invalid :- m1() has protected access in pak1.A

                        B b = new B();
                        b.m1();         // Invalid:- m1() has protected access in pak1.A

                        C c = new C();
                        c.m1();         //valid
                    }

                    -> If we want to access protected member in child then we must have to use child reference only.
                    -> In class C we have to use C reference Only.


        final Members (variables)
        -------------

            final instance variable
            -----------------------
             
                -> If the value of a variable is varied from object to object such type of variables are called instance variables.
                -> For every object a seperate copy of instance variable will be created.
                -> For instance variable we are not required to perform initialization explicitly JVM will always provide default values.

                    class Test{
                        int x;
                        public static void main(String[] args){
                            Test t = new Test();
                            System.out.println(t.x); // 0
                        }
                    }

                -> If the instance variable declared as final then compolsary we have to perform initialization explicitly whether we are using or not and JVM won't provide default values. 

                    class Test{
                        final int x;
                        public static void main(String[] args){
                            Test t = new Test();
                            System.out.println(t.x); // variable x might not have been initialized
                        }
                    }

                RULE
                ----
                    -> for final instance variable compolsary we have to perform initialization before constructor completion.

                The following are various places to initialization.

                    1. At the time of declaration.

                        class Test{
                            final int x = 0;
                        }

                    2. Inside instance block.

                        class Test {
                            final int x;
                            {
                                x = 0;
                            }
                        }

                    3. Inside constructor. 

                        class Test {
                            final int x;
                            Test() {
                                x = 0;
                            }    
                        }

                    -> These are only valid place to perform initialization of final instance variables anywhere else we get compile time error.

                        class Test {
                            final int x;
                            public static void m1() {
                                x = 0; // cannot assign a value to final variable x
                            }    
                        }


            final static variable
            ---------------------

                -> If a value of variable are not varied from object to object such type of variable not recommended as instance variable we have to declare those variable at class level by using static modifier.
                -> In case of Static variables a single copy will be created at class level and shared by every object of that class.
                ->  for static variable JVM always provide default values.

                    class Test{
                        static int x;
                        public static void main(String[] args){
                            System.out.println(x);
                        }
                    } 
                
                -> If the static variable declared as final then compolsary we have to perform initialization explicitly whether we are using or not and JVM won't provide default values. 

                    class Test {
                        final static int x; // variable x might not have been initialized.
                    }
                
                RULE
                ----
                    -> For final static variale we have to perform initialization before class loading completion.
                    
                
                The following are various places for initialization of static variable.
                 
                    1. At the time of declaration.

                        class Test {
                            final static int x;
                        }

                    2. Inside static block.

                        class Test{
                            final static int x;
                            static{
                                x = 0;
                            }
                        }

                    These are the only valid place to perform initialization for static final variable.

                        class Test {
                            final static int x;
                            public void m1(){
                                x = 0; // cannot assign a value to final variable x.
                            }
                        }


            final local variables
            ---------------------

                -> A variable declared inside a method, constructor or block are considered as local variable.

                





