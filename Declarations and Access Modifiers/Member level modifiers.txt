
    Member level modifiers
    ======================

    -> Recommended modifier for data member(variable) is private.
    -> Recommended modifier for methods is public.
    
        Public Members
        --------------

            -> If a member declared as public then we can access that member form any where but corrosponding class should be visible.
            -> before checking member visibility we have to check class visibility.
            -> If a class and method both public then only we can access that form outside package.


        default Members
        ---------------

            -> If a member declared as default then we can access that member only with in the current package that is form out side of package we can't access.
            -> default access is known as package level access.


        private Members
        ---------------

            -> If a member is private then we can access that member only with in the class that is form outside of the class we can't access.
            -> abstract method should be availabel to the child classes to provide implemetation where as private methods are availabel to the child classes hence private abstract combination is illegal for methods.


        Protected Members [The most missunderstood modifier in java]
        -----------------

            -> If a member declared as Protected then we can access that member anywhere with in the current package but only in child classes of outside package.
                
                Protected = default + kids.

            -> we can access Protected member with in the current package any where either by using parent reference or by using child reference but we can access protected member in outside package only in child classes and we should use child reference only that is parent reference can not be used to access protected member form outside package.

            -> we can access protected member form outside only in child classes and we should use that child class reference only.

                Example:- 
                ---------   
                    package pak1;
                    public class A{
                        protected void m1(){
                            System.out.println("A");
                        }
                    }

                    package pak2
                    public class B extends A{

                    }
                    public class C extends B{
                        A a = new A();
                        a.m1();        //Invalid :- m1() has protected access in pak1.A

                        B b = new B();
                        b.m1();         // Invalid:- m1() has protected access in pak1.A

                        C c = new C();
                        c.m1();         //valid
                    }

                    -> If we want to access protected member in child then we must have to use child reference only.
                    -> In class C we have to use C reference Only.


        final Members (variables)
        -------------

            final instance variable
            -----------------------
             
                -> If the value of a variable is varied from object to object such type of variables are called instance variables.
                -> For every object a seperate copy of instance variable will be created.
                -> For instance variable we are not required to perform initialization explicitly JVM will always provide default values.

                    class Test{
                        int x;
                        public static void main(String[] args){
                            Test t = new Test();
                            System.out.println(t.x); // 0
                        }
                    }

                -> If the instance variable declared as final then compolsary we have to perform initialization explicitly whether we are using or not and JVM won't provide default values. 

                    class Test{
                        final int x;
                        public static void main(String[] args){
                            Test t = new Test();
                            System.out.println(t.x); // variable x might not have been initialized
                        }
                    }

                RULE
                ----
                    -> for final instance variable compolsary we have to perform initialization before constructor completion.

                The following are various places to initialization.

                    1. At the time of declaration.

                        class Test{
                            final int x = 0;
                        }

                    2. Inside instance block.

                        class Test {
                            final int x;
                            {
                                x = 0;
                            }
                        }

                    3. Inside constructor. 

                        class Test {
                            final int x;
                            Test() {
                                x = 0;
                            }    
                        }

                    -> These are only valid place to perform initialization of final instance variables anywhere else we get compile time error.

                        class Test {
                            final int x;
                            public static void m1() {
                                x = 0; // cannot assign a value to final variable x
                            }    
                        }


            final static variable
            ---------------------

                -> If a value of variable are not varied from object to object such type of variable not recommended as instance variable we have to declare those variable at class level by using static modifier.
                -> In case of Static variables a single copy will be created at class level and shared by every object of that class.
                ->  for static variable JVM always provide default values.

                    class Test{
                        static int x;
                        public static void main(String[] args){
                            System.out.println(x);
                        }
                    } 
                
                -> If the static variable declared as final then compolsary we have to perform initialization explicitly whether we are using or not and JVM won't provide default values. 

                    class Test {
                        final static int x; // variable x might not have been initialized.
                    }
                
                RULE
                ----
                    -> For final static variale we have to perform initialization before class loading completion.
                    
                
                The following are various places for initialization of static variable.
                 
                    1. At the time of declaration.

                        class Test {
                            final static int x;
                        }

                    2. Inside static block.

                        class Test{
                            final static int x;
                            static{
                                x = 0;
                            }
                        }

                    These are the only valid place to perform initialization for static final variable.

                        class Test {
                            final static int x;
                            public void m1(){
                                x = 0; // cannot assign a value to final variable x.
                            }
                        }


            final local variables
            ---------------------

                -> A variable declared inside a method, constructor or block are considered as local variable.
                -> These variables are created for temporary use only.
                -> local variable are also known as temporary variable/ stack variable/ Automatic variable.
                -> For local variable JVM won't provide any default value compolsary we should perform initialization explecitly before using that local varaible that is if we are not using then it is not required to perform initialization.

                    class Test {
                        public static void main(String[] args){
                            int x;
                            System.out.println("Hello"); // Hello
                        }
                    }

                    class Test {
                        public static void main(String[] args) {
                            int x;
                            System.out.println(x); //variable x might not have been initialized.
                        }
                    }


                -> Even though local variable is final before using only we have to perform initialization that is if we are not using then it is not required to perform initialization even though it is final.

                    class Test{
                        public static void main(String[] args){
                            final int x;
                            System.out.println("Hello"); // Hello
                        }
                    }
                
                    class Test {
                        public static void main(String[] args){
                            final int x;
                            System.out.println(x); // variable x might not have been initialized.
                        }
                    }


                -> The only allicable modifier for local variable is final by mistake if we are trying to apply any other modifier then we will get compile time error.

                    class Test{
                        public static void main(String[] args){
                            public int x = 0; //Illigal start of expression.
                            private int x = 0; //Illigal start of expression.
                            protected int x = 0; //Illigal start of expression.
                            volatile int x = 0; //Illigal start of expression.
                            transient int x = 0; //Illigal start of expression.
                            static int x = 0; //Illigal start of expression.
                        }
                    }

                ->  If we not specify any modifier then bydefault is default for instance and static variable but not for local variable.
                -> former parameter of method access local variable of the method hence former parameter can be declared as final then with in the method we can't perform re assignment.

        
        static member (method)
        ----------------------
            
            -> static is a modifier applicable for methods and variable but not for classes.
            -> we can't declare top level class with static modifier but we can declare inner class as static(such type of inner classes are called static nested classes).
            -> In the case of instance variables for every object a seperate copy will be created but in the case of static variables a single copy will be created at class level and shared by every object of class.

                class Test{
                    static int x = 10;
                    int y = 20;

                    public static void main(String[] args){
                        Test t1 = new Test();
                        t1.x = 888;
                        t1.y = 999;
                        Test t2 = new Test();
                        System.out.println(t2.x + "..." + t2.y); //888...20
                    }
                }
            
            -> we can't access instance members directly from static area but we can access from instance area directly.
            -> we can access static members from both static and instance are directly.

            Consider following declarations
            -------------------------------

                1. int x = 10;
                2. static int x = 10;
                3. public void m1(){
                    System.out.println(x);
                }
                4. public static void m1(){
                    System.out.println(x);
                }

                -> with in the same class which of the diclaration we can take simultaneously.

                A. 1 & 3 //valid
                B. 1 & 4 // non-static variable x cannot be referenced from a static area.
                C. 2 & 3 // valid
                D. 2 & 4 //valid
                E. 1 & 2 // variable x is already defined in Test.
                F. 3 & 4 // m1() is already defined in Test.

            Case 1:-
            
                -> overloading concept is applicable for static method also including main method but JVM will always call main method with String argument.

                class Test{
                    public static void main(String[] args){
                        System.out.println("String args");
                    }
                    public static void main(int args){

                    }
                }

                -> other overloaded method we have to call just like a normal method call.
            
            Case 2:

                -> for static method inheritance concept is applicable including main method hence while executing child class if child does not contain main method then parent class main method will be executed.

                class P {
                    public static void main(String[] args){
                        System.out.println("parent main");
                    }
                }
                class C extends class P {

                }

                java P.java
                    output:- parent main

                java C.java
                    output:- parent main
                
            Case 3:

                class P {
                    public static void main(String[] args){
                        System.out.println("parent main");
                    }
                }
                class C extends class P {
                    public static void main(String[] args){
                        System.out.println("child main");
                    }
                }

                java P.java
                    output:- parent main

                java C.java
                    output:- child main

                -> It seems method overriding but it is not method overriding it is method hiding.
            
            -> for static method overloading and inheritance concept is applicable for static method but instade of method overriding method hiding concept is applicable.

    
            When to use static method and when to use instance method.
            ----------------------------------------------------------

            -> inside method implemetation if we are using at least one instance variable then that method talks about a perticular object hence we shoud declare method as instance method.
            -> inside method implemetation if we are not using any instance variable then that method no way related to a perticular object hence we have to declare such type of method as static method irrespective of whether we are static variables or not.


        synchronized modifier
        ---------------------

            -> synchronized is the modofier applicable for methods and blocks but not for classes and variables.
            -> if multiple threads trying operate simultaneously on the same java object then there may be a chance of data inconsistancy problem this is called race condition we can overcome this problem by using synchronized keyword.
            -> if a method or block declared as synchronized then at a time only one thread is allowed to execute that method or block on the given object so that data inconsistancy problem will be resolved.
            -> the main disadvantage of synchronized keyword is it increase waiting time of threads and creates performance problems hence if there a no specific requriment then it is not recommended to use synchronized keyword.
            -> synchronized method should compolsary contain implemetation where as abstract method does npt contain any implemetation hence abstract synchronized is Illigal combination of modifiers for methods.
            

        native modifier
        ---------------

            -> native is the modifier applicable for methods and we can't apply anywhere else.
            -> the methods which are implemented in non java(mostly C/C++) are called native methods or foreign methods.
            -> The main objectives of native keyword are 
                1. To improve performance of the system
                2. To achieve machine level or memory level communication.
                3. To use already existing legacy non java code.

            -> sudo code to use native keyword in java
                1. load native library.
                2. declare native method.
                3. invoke native method.

                class Native{
                    static{
                        System.loadLibrary(corosponding library path); //load native library
                    }
                    public native void m1();
                }

                class Test{
                    public static void main(String[] args){
                        Native native = new Native();
                        native.m1();
                    }
                }
            
            -> for native methods implementation is already available in old languages like c or c++ and we are not responsible to provide implementation hence native method declaration should ends with ;.

                public native void m1(); //valid 
                public native void m1(){} // invalid :- native method cannot have a body.

            -> for native methods implementation is already available in old languages but for abstract method implementation is not already availabel hence native abstract combination is illegal.
            -> we can't declare native method as strictfp because there is no guarantee that old languages follow IEEE-754 standard hence native strictfp combination is Illigal combination for methods.

            NOTE
            ----
                -> the main advantage of native keyword is performance is improved but the main disadvantage of native keyword is that it break platform independence of java.


        transient modifier
        ------------------

            -> transient is the modifier applicable only for variables.
            -> we can use transient keyword in serialization context.
            -> At the time of serialization if we don't want to save a value of perticular variable to meet security constraint then we should declare that variable transient.
            -> At the time of serialization JVM ignore original value of transient variable and save default value of that varaible.
            -> transient means NOT TO SERIALIZE.


        volatile modifier
        -----------------

            -> volatile is the modifier applicable only for varaible an we can't apply anywhere else.
            -> If the value of a variable keep on changing by multiple threads then there may be a chance of data inconsistancy problem to overcome this problem by using volatile modifier.
            -> If a variable declared as volatile then for every thread JVM will create a seperate local copy every modification is perfomed by that thread will take place on local copy so there is no effect on remaining threads.
            -> the main advantage of volatile keyword is we can overcome data inconsistancy problem but the main disadvantage of volatile keyword is creating and maintaining a seperate copy for every thread will increases a complexity of program and decrease performance hence if there is not specific requriment then not to use it is almost deperacated modifier.
            -> final variable means the value never changes whereas volatile varaible means that value is keep on changing hence volatile final is Illigal combination for variables.

            










