

            Interfaces
            ==========


    1. Introduction
    2. Interface declaration and implementation
    3. extends vs implements
    4. Interface methods
    5. Interface variables
    6. Interface naming conflicts 
        - method naming conflicts
        - variable naming conflicts
    7. Marker Interfaces
    8. Adapter classes
    9. Interface vs abstract class vs concrete class
    10. Differences between Interfaces and abstract class


        Introduction
        ------------

            definition 1:-
            
                -> Any service requirement specification(SRS) considered as interface.
                
                Example 1:-
                    -> JDBC API access requirement specification to develope database driver.
                    -> database vender is responsible to implement this JDBC API.

                Example 2:-
                    -> Servlet API access requirement specification to develope web server.
                    -> web server vender is responsible to implement Servlet API.
            
            definition 2:-

                -> from client point of view an interface defines the set set of services what he is expecting.
                -> form service provider point of view an interface defines the set of service what he is offering.
                -> Any contract between client and service provider is considered as an interface.

                Example :-
                    -> Through bank ATM GUI screen bank people highlighting the set of services what they are offering at the same time the same GUI screen represent the set of services what customer is expecting hence this GUI screen access contract between customer and bank people.


            definition 3:-

                -> Inside interface every method is always abstract whether we are declaring or not hence interface is considered as 100% pure abstract class.

            -> Any service requirement specification or any contract between client and service provider or 100% pure abstract class is nothing but interface.


        Interface declaration and implementation
        ----------------------------------------

            -> whenever we are implementing an interface for each and every method of that interface we have to provide implementation otherwise we have to declare class as abstract then next level child class is responsible to provide implementation.
            -> every interface method is always public and abstract whether we are declaring or not hence whenever we are implementing interface then compolsary we have to declare every method as public otherwise we will get compile time error.

            Example:-

                Interface Interf{
                    void m1();

                    void m2();
                } 
                abstract class ServiceProvider implements Interf{
                    public void m1(){

                    }
                }
                class SubServiceProvider extends ServiceProvider{
                    public void m2(){

                    }
                }
        
        extends vs implements
        ---------------------

            -> A class can extend only one class at a time.
            -> An interface can extend any number of interface simelteneously.

                interface A {

                }

                interface B {

                }

                interface C extends A,B{

                }

            -> A class can implement any number of interface simelteneously.
            -> A class can extend another class and can implement any number of Interfaces simelteneously.

                class A extends B implements C,D,E{

                }

            Which of the following is valid?
            
            1. A class can extend any number of classes at a time. //Invalid
            2. A class can implement only one interface at a time. //Invalid
            3. An interface can extend only one interface at a time. //Invalid
            4. An interface can implement any number of interfaces simelteneously. //Invalid
            5. A class can extend another class or can implement an interface but not both simelteneously. //Invalid
            6. none of the above //true

            1. x extends y
            -> Both x any y can be either classes or an interfaces.
            
            2. x extends y,z
            -> x,y,z should be interfaces.

            3. x implements y,z
            -> x should be class.
            -> y, z should be interfaces.

            4. x extends y implements z
            -> x, y should be classes.
            -> z should be interface.

            5. x implements y extends z
            -> compile time error.
            ->because we have to take extends first followed by interface.


        Interface methods
        -----------------

            -> Every method present inside interface is always public and abstract whether we are declaring or not.

            interface interf{
                void m1();
            }

            why every method is public?
                -> To make this method available to every implementation class.
            
            why every method is abstract?
                -> implementation class is responsible to provide implementation.

            The following method declaration are equal.
                -> void m1();
                -> public void m1();
                -> public abstract void m1();
                -> abstract void m1();
            

            -> we can't declare interface method with the following modifiers.
                1. private 
                2. protected
                3. static
                4. strictfp
                5. synchronized
                6. final
                7. native
            
            -> which of the following method declarations are allowed inside interface?

                1. public void m1(){} //Invalid
                2. private void m1(); //Invalid
                3. protected void m1(); //Invalid
                4. static void m1(); //Invalid
                5. public abstract native void m1(); //Invalid
                6. abstract public void m1(); //valid

        Interface variables
        -------------------
            ->
            
            


