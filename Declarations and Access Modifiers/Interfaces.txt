

            Interfaces
            ==========


    1. Introduction
    2. Interface declaration and implementation
    3. extends vs implements
    4. Interface methods
    5. Interface variables
    6. Interface naming conflicts 
        - method naming conflicts
        - variable naming conflicts
    7. Marker Interfaces
    8. Adapter classes
    9. Interface vs abstract class vs concrete class
    10. Differences between Interfaces and abstract class


        Introduction
        ------------

            definition 1:-
            
                -> Any service requirement specification(SRS) considered as interface.
                
                Example 1:-
                    -> JDBC API access requirement specification to develope database driver.
                    -> database vender is responsible to implement this JDBC API.

                Example 2:-
                    -> Servlet API access requirement specification to develope web server.
                    -> web server vender is responsible to implement Servlet API.
            
            definition 2:-

                -> from client point of view an interface defines the set set of services what he is expecting.
                -> form service provider point of view an interface defines the set of service what he is offering.
                -> Any contract between client and service provider is considered as an interface.

                Example :-
                    -> Through bank ATM GUI screen bank people highlighting the set of services what they are offering at the same time the same GUI screen represent the set of services what customer is expecting hence this GUI screen access contract between customer and bank people.


            definition 3:-

                -> Inside interface every method is always abstract whether we are declaring or not hence interface is considered as 100% pure abstract class.

            -> Any service requirement specification or any contract between client and service provider or 100% pure abstract class is nothing but interface.


        Interface declaration and implementation
        ----------------------------------------

            -> whenever we are implementing an interface for each and every method of that interface we have to provide implementation otherwise we have to declare class as abstract then next level child class is responsible to provide implementation.
            -> every interface method is always public and abstract whether we are declaring or not hence whenever we are implementing interface then compolsary we have to declare every method as public otherwise we will get compile time error.

            Example:-

                Interface Interf{
                    void m1();

                    void m2();
                } 
                abstract class ServiceProvider implements Interf{
                    public void m1(){

                    }
                }
                class SubServiceProvider extends ServiceProvider{
                    public void m2(){

                    }
                }
        
        extends vs implements
        ---------------------

            -> A class can extend only one class at a time.
            -> An interface can extend any number of interface simelteneously.

                interface A {

                }

                interface B {

                }

                interface C extends A,B{

                }

            -> A class can implement any number of interface simelteneously.
            -> A class can extend another class and can implement any number of Interfaces simelteneously.

                class A extends B implements C,D,E{

                }

            Which of the following is valid?
            
            1. A class can extend any number of classes at a time. //Invalid
            2. A class can implement only one interface at a time. //Invalid
            3. An interface can extend only one interface at a time. //Invalid
            4. An interface can implement any number of interfaces simelteneously. //Invalid
            5. A class can extend another class or can implement an interface but not both simelteneously. //Invalid
            6. none of the above //true

            1. x extends y
            -> Both x any y can be either classes or an interfaces.
            
            2. x extends y,z
            -> x,y,z should be interfaces.

            3. x implements y,z
            -> x should be class.
            -> y, z should be interfaces.

            4. x extends y implements z
            -> x, y should be classes.
            -> z should be interface.

            5. x implements y extends z
            -> compile time error.
            ->because we have to take extends first followed by interface.


        Interface methods
        -----------------

            -> Every method present inside interface is always public and abstract whether we are declaring or not.

            interface interf{
                void m1();
            }

            why every method is public?
                -> To make this method available to every implementation class.
            
            why every method is abstract?
                -> implementation class is responsible to provide implementation.

            The following method declaration are equal.
                -> void m1();
                -> public void m1();
                -> public abstract void m1();
                -> abstract void m1();
            

            -> we can't declare interface method with the following modifiers.
                1. private 
                2. protected
                3. static
                4. strictfp
                5. synchronized
                6. final
                7. native
            
            -> which of the following method declarations are allowed inside interface?

                1. public void m1(){} //Invalid
                2. private void m1(); //Invalid
                3. protected void m1(); //Invalid
                4. static void m1(); //Invalid
                5. public abstract native void m1(); //Invalid
                6. abstract public void m1(); //valid

        Interface variables
        -------------------
            -> An interface can contain variables the main purpose of interface variable is to define requirement level constants.
            -> Every interface variable is always public static final whether we are declaring or not.
            
            interface Interf{
                int x = 10;
            }
            
            why interface variable is public?
                -> To make this variable available to every implementation class.

            why interface variable is static?
                -> without existing object it can be available.
            
            why interface variable is final?
                -> Every implementation classes have access to this variable if any implementation change this variable then it will affect all the remaining implementation classes that is why it is final.

            Inside interface the following variable declaration are equal.
                1. int x = 10;
                2. public int x =10;
                3. static int x =10;
                4. public static int x =10;
                5. final x = 10;
                6. public final int x = 10;
                7. public static final int x =10;
                8. static final int x =10;

            -> As every interface variable is always public static final we can't declare with the following modifiers.
                1. private 
                2. protected
                3. transient
                4. volatile

            -> for interface variable compolsary we should perform initialisation at the time of declaration otherwise we will get compile time error.
                interface Interf {
                    int x; // = expected
                }
                interface Interf {
                    int x = ; // Illigal start of expression
                }
                interface Interf {
                    int x = 10; // valid
                }

            -> Inside interface which of the following variable declaration is allowed.
                1. int x;   //Invalid
                2. private int x = 10; //Invalid
                3. protected int x = 10; //Invalid
                4. volatile int x = 10; //Invalid
                5. transient int x = 10; //Invalid
                6. public static int x = 10; //Valid

            -> Inside implementation class we can access interface variables but we can't modify values.

                interface Interf {
                    int x = 10;
                } 

                class TestOne implements Interf{
                    public static void main(String[] args){
                        x = 888;
                        System.out.println(x); //compile time error
                    }
                }

                class TestTwo implements Interf{
                    public static void main(String[] args){
                        int x = 888;
                        System.out.println(x); // 888
                    }
                }
        
        Interface naming conflicts
        --------------------------

            method naming conflicts
            -----------------------

                Case 1:-

                    -> If two interfaces contains a method with same signature and same return type then in the implementation class we have to provide implementation for only one method.

                        interface left {        interface right{
                            void m1();              void m1();
                        }                       }

                        class Test {
                            public void m1(){

                            }
                        }
                
                Case 2:-

                    -> If two interfaces contains a method with a same name but different argument types then in the implimentaion class we have to provide implementation for both methods and this method access overloaded methods.

                        interface left {        interface right{
                            void m1();              void m1(int i);
                        }                       }

                        class Test {
                            public void m1(){

                            }
                            public void m1(int i){

                            }
                        }

                Case 3:-

                    -> If two interfaces contains a method with same signature but different return type then it is impossible to implement both interfaces simelteneously(if return types are not covarient).
                        interface left {        interface right{
                            void m1();              int m1();
                        }                       }

                    -> we can't write any java class which implements both interfaces simelteneously.

                Is a java class can implement any number of interface simelteneously.
                    -> If two interfaces contains a method with a same signature but different return types then it is impossible to implement both interfaces simelteneously.


            Interface variable naming conflicts
            -----------------------------------

                    interface left {        interface right{
                        int x = 10              int x = 10;
                    }                       }

                    class Test {
                        public static void main(String[] args){
                            System.out.println(x); // compile time error :- reference to x is ambiguious
                        }
                    }
            
                -> Two interfaces can contain variable with same name but there may be a variable naming conflict but we can solve this problem by using interface names.

                    interface left {        interface right{
                        int x = 10              int x = 10;
                    }                       }

                    class Test {
                        public static void main(String[] args){
                            System.out.println(left.x); // 10
                        }
                    }
            
        Marker Interface
        ----------------
            -> If an interface does't contain any methods and by implimenting that interface if our object get some ability such type of interfaces are called marker interfaces (ability interface / tag interface).

            Example:- 
                1. Serializable
                2. Cloneable
                3. randomAccess
                4. SingleThreaedModel

                -> This are marked for some ability.

            Example 1 :- 
                -> By implementing Serializable interface our object can be saved to file and can travel accross the network.

            Example 2:- 
                -> By implementation a cloneable interface our objects are in a position to produce exectly duplicate cloned objects.

            Without having any methods how the object get some ability in the marker interfaces?
                -> Internally JVM is responsible to provide required ability.

            Why JVM is providing required ability in marker interfaces?
                -> To reduce complexity of programming and to make java language as simple.
                
            Can we create our own marker interface?
                -> Yes, but customization of JVM is required.


        Adapter classes
        ---------------  
            -> Adapter is a simple java class that implements an interface with only empty implementation.

                interface Interf {
                    void m1();

                    void m2();

                    void m3();
                    .
                    .
                    .
                    void m1000();
                }       

                abstract class Test implements Interf {
                    public void m1(){

                    }
                    public void m2(){

                    }
                    public void m3(){

                    }
                    .
                    .
                    .
                    public void m1000(){

                    }
                }   
            
            -> If we implement an interface then for each and every method we have to provide implementation whether we are required or not required.
            -> If we extend Adapter class then we have to provide implementation for only required methods and we are not responsible to provide implementation for each and every method of the interface so that length of the code will be reduced.
            
            Example:- 
                -> we can develop a servlet in three ways. 
                    1. By implementing servlet interface 
                    2. By exdending generic servlet
                    3. By extending HttpServlet

                -> If we implement servlet interface then for each and every method of that interface we should provide implementation it increase length of code and reduces readability.
                -> Instade of implementing servlet interface directly if we extend generic servlet we have to provide implementation only for service method and for all remaining methods we are not required to provide implemetation hence more or less generic servlet access Adapter class for servlet interface.
        
        NOTE:-
        ------
            -> marker interface and Adapter classes simplify complexity of programming and these are best utilities to the programmer and programmers life will become simple.


        Interface vs Abstract class vs concrete class
        ---------------------------------------------

            Interface :- If we don't know any thing about implimentaion just we have requirement specification then we should go for interface.
                Example:- Servlet
            
            Abstract class :- If we are talking about implementation but not completely partial implementation then we should go for abstract class.
                Example:- GenericServlet, HttpServlet
            
            concrete class :- If we are talking about implemetation completely and ready to provide service then we should go for concrete class.
                Example:- myOwnServlet

        Differences between interface and abstract class
        ------------------------------------------------

                            Interface                                                                       Abstract class
            
            -> If we don't know anything about implementation               -> If we are talking about implementation but not completely(partial)
            and just we have requirement specification then                     then we should go for abstract class.
            we should go for Interface.

            -> Inside interface every method is public and                  -> Every method inside abstract class need not be public and abstract
            abstract whether we are declaring or not hence                      also we can take concrete method.
            interface considered as pure abstract class.

            -> As every interface method is public and abstract             -> There are no restrictions on abstract class method modifiers.
            hence we can't declare with the following modifiers
            private, protected, final, static, synchronized,
            native and strictfp.

            -> Every variable present inside interface is                   -> Every variable present inside abstract class need not be public 
            always public static final whether we are declaring                 static final.
            or not.

            -> As every interface variable is always public static          -> There are no restrictions on abstract class variable modifiers.
            final we can't declare with the following modifiers
            private, protected, transient, volatile.

            -> For interface variable compolsary we should perform          -> For abstract class variables we are not required to perform initialisation 
            initialisation at the time of declaration only otherwise            at the time of declaration.
            we will get compile time error.

            -> Inside interface we can't declare static and instance        -> Inside abstract class we can declare static and instance blocks.
            blocks.

            -> Inside interface we can't declare constructors.              -> Inside abstract class we can declare constructors.


        Abstract class loopholes
        ------------------------

            1. we can't create object of abstract class but abstract class can contain abstract class what is the need?
                -> abstract class constructor will be executed whenever we are creating child class object to perform initialisation of child class object only.
            
            -> Either directly or indirectly we can't create object for abstract class.
            
            2. we can't create object for interface and abstract class but abstract class can contain constructor and interface does't contain constructor why?
                -> The main purpose of constructor is to perform initialisation for instance variables 
                -> abstract class can contain instance variables which are required for child object.
                -> To perform initialisation of those instance variables constructor is required for abstract class.
                -> Every variable present inside interface are public static final whether we are declaring or not there is no chance of existing instance variable inside interface hence constructor are not required interface.
            
            -> whenever we are creating child class object parent object wan't be created just parent class constructor will be executed for the child object purpose only.
            -> proof.java

        Is it possible to replace interface with abstract class?
        -> we can replace interface with abstract class but it is not a good programming practice.
        -> This something like recruting IAS officer for swiping activity.
        -> If every thing is abstract then it is highly recommended to go for interface.

        interface a {                                   abstract class a{

        }                                               }      
        
        class Test implements a {                       class Test extends a {

        }                                               }

        -> while implementing interface                 -> while exending abstract class then extending 
           we can extend other class                       another class is not possible hence we are missing
           hence we won't miss any inheritance             inheritance benefits.
           benefits.

        -> object creation is not costly.                -> object creation is costly.






            

            
        


            
            
            


