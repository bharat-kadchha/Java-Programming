
     ** Import statement **
     ======================


    class Test {
        public static void main(String[] args){
            ArrayList list = new ArrayList();
        }
    }

    Output:- cannot find symbol
             symbol:   class ArrayList
             location: class 


    -> we can solve this problem by using fully qualified name.

        java.util.ArrayList l = new java.util.ArrayList();


    Case 1 :-

            -> The problem with usage of fully qualified name every time is it increase length of code and reduce readablity.

            -> we can solve this problem using import statement whenever we are writing import statement is not required to use fully qualified name every time we can use short name directly.

            import java.util.ArrayList;
            class Test {
                public static void main(String[] args){
                    ArrayList list = new ArrayList();
                }
            }


        Types of import
        ---------------

    -> There are two types of import statement.
    1. Explicit class import.
    2. Implicit class import.

    -> It is highly recommended to use Explicit class import because it improves the readablity of the code.


    Case 2 :- 

        -> which of the following import is meaningfull or valid.
        
            import java.util.ArrayList; //valid or meaningfull
            import java.util.ArrayList.*; //invalid or meaningless
            import java.util.*; //valid
            import java.util;  //invalid

        -> * After class name is meaningless.
        -> ; after package name is meaningless.


    Case 3 :- 
        consider the following code

        class myObject extends java.rmi.UnicastRemoteObject{

        }

        -> code compile's file even though we are not writing import statement. 
        -> because we used fully qualified name.


    NOTE:- When ever we are using fully qualified name it is not required to write import statement.

    Case 4:-

            import java.util.*;
            import java.sql.*;
            class Test {
                public static void main(String[] args){
                    Date date = new Date();
                }
            }

            output:- reference to Date is ambiguous


