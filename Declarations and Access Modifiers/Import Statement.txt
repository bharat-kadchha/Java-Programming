
     ** Import statement **
     ======================


    class Test {
        public static void main(String[] args){
            ArrayList list = new ArrayList();
        }
    }

    Output:- cannot find symbol
             symbol:   class ArrayList
             location: class 


    -> we can solve this problem by using fully qualified name.

        java.util.ArrayList l = new java.util.ArrayList();


    Case 1 :-

            -> The problem with usage of fully qualified name every time is it increase length of code and reduce readablity.

            -> we can solve this problem using import statement whenever we are writing import statement is not required to use fully qualified name every time we can use short name directly.

            import java.util.ArrayList;
            class Test {
                public static void main(String[] args){
                    ArrayList list = new ArrayList();
                }
            }


        Types of import
        ---------------

    -> There are two types of import statement.
    1. Explicit class import.
    2. Implicit class import.

    -> It is highly recommended to use Explicit class import because it improves the readablity of the code.


    Case 2 :- 

        -> which of the following import is meaningfull or valid.
        
            import java.util.ArrayList; //valid or meaningfull
            import java.util.ArrayList.*; //invalid or meaningless
            import java.util.*; //valid
            import java.util;  //invalid

        -> * After class name is meaningless.
        -> ; after package name is meaningless.


    Case 3 :- 
        consider the following code

        class myObject extends java.rmi.UnicastRemoteObject{

        }

        -> code compile's file even though we are not writing import statement. 
        -> because we used fully qualified name.


    NOTE:- When ever we are using fully qualified name it is not required to write import statement.

    Case 4:-

        -> One case is Date.
        import java.util.*;
        import java.sql.*;
        class Test {
            public static void main(String[] args){
                Date date = new Date();
            }
        } 

        output:- compile time error:- reference to Date is ambiguous.

        -> Second case is List is available in awt and util package.

    
    Case 5:- 
        -> while resolving class names compiler will gives a precedence in the following order.
        1. Explicit class import
        2. Classes present in current working directory(default package)
        3. Implicit class Import

            import java.util.Date;
            import java.sql.*;
            class Test {
                public static void main(String[] args){
                    Date date = new Date(); 
                    System.out.println(date.getClass().getName()); //java.util.Date
                }
            } 


    Case 6:-
        -> whenever we are importing a java package all classes and interfaces present in that package bydefault available but not sub package classes.
        -> If we want to use sub package class then we should have to write import statement until sub package level.

        java -> util -> regex -> pattern

        -> To use pattern class in our program then which import statement is required.

        1. import java.*;
        2. import java.util.*;
        3. import java.util.regex.*;  //valid ans
        4. No import required


    Case 7:-
        -> All classes and interfaces present in the following package are bydefault available to every java program hence we are not required to write import statement.

        1. java.lang package
        2. default package (current working directory)


    Case 8 :-
        -> import statement is totally compile time related concept.
        -> if more number of imports then more will be the compile time but there is no affect on execution time (Runtime).

    
    Case 9:-

        -> C language #include<stdio.h> vs java import statement.

        -> In the case of c language #include all the input output header files will be loaded at the beginning only at translation time hence it is static include.

        -> In the case of java language no .class file will be loaded at the beginning whenever we are using a perticular class then only corrosponding .class file will be loaded. This is consider as dynamic loading, load on demand, load on fly.




    
