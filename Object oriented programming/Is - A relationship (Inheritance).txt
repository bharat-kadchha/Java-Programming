        Is - A relationship (Inheritance)
        =================================
    
    -> It is also known as inheritance.
    -> The main advantage of IS - A replationship is code reusability.
    -> By using extends keyword we can implement IS - A relationship.

    Example:-

        class P{
            public void m1(){
                System.out.println("Parent");
            }
        }

        class C extends P{
            public void m2(){
                System.out.println("Child");
            }
        }

        class Test {
            public static void main(String[] args){
                
                //case 1                
                P p = new P();
                p.m1();
                p.m2();     //cannot find symbol

                //case 2
                C c = new C();
                c.m1();
                c.m2();

                //case 3
                P p1 = new C();
                p1.m1();
                p1.m2();  //cannot find symbol

                //case 4
                C c1 = new P(); //incompatible types: P cannot be converted to C
            }
        }

    CONCLUSIONS
    -----------
        -> Whatever methods parents has bydefault available to the child and hence on the child reference we can call both parent and child class methods.
        -> Whatever methods child has bydefault not available to the parent and hence on the parent reference we can't call child specific methods.
        -> Parent reference can be use to hold child object but by using that reference we can't call child specific methods but we can call the methods present in parent class.
        -> Parent reference can be use to hold child object but child reference cannot be use to hold parent object.

    NOTE
    ----
        -> The most common method which are applicable for any type of child, we have to define in parent class.
        -> The specific method which are applicable for a perticular child, we have to define in child class.

    -> Total Java API is implemented based on inheritance concept.
    -> The most common method which are applicable for any java object are defined in object class and hence every class in java is the child class of object either directly or indirectly so that object class methods by default available to every java class without rewritting.
    -> Object class is root for all java class.

    -> Throwable class defines the most common methods which are required for every exception and error classes hence this class access root for java exception hierarchy.


    Multiple Inheritance
    --------------------

        -> A java class can't extend more then one class at a time hence java won't provide support for multiple inheritance in classes.

            class A extends C,D{

            }

            output:- Compile time error.

        -> If our class does't extend any other class then only our class is direct child class of object.
        -> If our class extend any other class then our class is indirect child of object.
        -> Either direct or indirectly java won't provide support for inheritance with respect to classes.
    
    
