
        Method Overloading
        ==================
    
    -> Two methods are said to be overloaded if and only if both methods having same name but different argument types.
    
    -> In c language method overloading concept is not available hence we can't declare multiple methods with the same name but different arguments type if there a change in argument type compulsary we should go for new mwthod name which increases complexity of programming.

        abs(int i)
        labs(long l)
        fabs(float f)
    
    -> In java we can declare multiple methods with same name but different argument types asuch type of methods are called overloaded methods.

        abs(int i)
        abs(long l)
        abs(float f)
    
    -> Having overloading concept in java reduces complexity of programming.

        class Test{
            public void m1(){
                System.out.println("no - arg");
            }
            public void m1(int i){
                System.out.println("int arg");
            }
            public void m1(double d){
                System.out.println("double arg");
            }
        }

        class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1();
                t.m1(10);
                t.m1(10.5);
            }
        }

    -> In overloading method resolutin always takes care by compiler based on reference types hence overloading is also considered as compile time polymorphism or static polymorphism or early binding.
    
    -> In overloading exact match will get chance first above all.

    Case 1:- Automatic promotion in overloading

        class Test {
            public void m1(int i){
                System.out.println("int arg");
            }
            public void m1(float f){
                System.out.println("float arg");
            }
        }

        public class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1(10);   //int arg
                t.m1(10.5f); //float arg
                t.m1('a'); // int arg       (char is promoted to int)
                t.m1(100l); //float arg     (long is promoted to float)
                t.m1(10.6); //compile time error:- no suitable method found for m1(double)
            }
        }

    Case 2:- 
        -> In child and parent both matched then first priority is goes to child.

        class Test {
            public void m1(Object o){
                System.out.println("object version");
            }
            public void m1(String s){
                System.out.println("String version");
            }
        }

        public class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1(new Object()); //object version
                t.m1("yogesh");     //String version
                t.m1(null);         //String version
            }
        }
    
    Case 3:-
        -> If there is no relationship between two parameter and both method match the argument then compiler rise error.

        class Test {
            public void m1(StringBuffer sb){
                System.out.println("StringBuffer version");
            }
            public void m1(String s){
                System.out.println("String version");
            }
        }

        public class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1(new StringBuffer("yogesh")); //StringBuffer version
                t.m1("yogesh");     //String version
                t.m1(null);         //compile time error:-
            }
        }

    Case 4:- 
        -> If there is fight between new and old then old will always win in java.
        -> vararg method is always get least priority.


        class Test {
            public void m1(int i){
                System.out.println("general method");
            }
            public void m1(int... vararg){
                System.out.println("vararg method");
            }
        }

        public class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1();       //vararg method
                t.m1(10,20); //vararg method
                t.m1(10); //general method
            }
        }

    Case 5:- 

        -> If both method match then we will get compile time error. 

        class Test {
            public void m1(int i, float f){
                System.out.println("int - float arg");
            }
            public void m1(float f, int i){
                System.out.println("float - int arg");
            }
        }

        public class main{
            public static void main(String[] args){
                Test t = new Test();
                t.m1(10,10.5f); //int - float arg
                t.m1(10.5f, 10); //float - int arg 
                //t.m1(10,10); //compile time error:- reference to m1 is ambiguous
                //t.m1(10f,10f); //compile time error:- no suitable method found for m1(float,float)
            }
        }

    Case 6:- 

        class Animal {
            
        }
        class Monkey extends Animal{

        }

        class Test {
            public void m1(Animal a){
                System.out.println("Animal version");
            }
            public void m1(Monkey m){
                System.out.println("Monkey version");
            }

            public static void main(String[] args){
                Test t = new Test();

                Animal a = new Animal();
                t.m1(a);    //Animal version

                Monkey m = new Monkey();
                t.m1(m);     //Monkey version

                Animal a1 = new Monkey();
                t.m1(a1);   //Animal version
            }
        }

    NOTE
    ----

        -> In overloading method resolutin always takes cares by compiler based on reference type.


